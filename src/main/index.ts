import { app, BrowserWindow, ipcMain, dialog, session, Menu } from 'electron'
import type { MessageBoxOptions } from 'electron'

import createMnemonicWindow from './mnemonicWindow'
import { createAboutWindow } from './aboutWindow'

import { registerDocumentHandlers, registerCollectionHandlers } from './handlers'

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit()
}

const isDevelopment = process.env.NODE_ENV === 'development'

// export const isMac = os.platform() === 'darwin'
// export const isWindows = os.platform() === 'win32'
// export const isLinux = os.platform() === 'linux'

export const platform = process.platform
export const appPath = app.getPath('userData')

if (isDevelopment) {
  console.log(appPath)
}

let mainWindow: BrowserWindow
let aboutWindow: BrowserWindow

const windowOptions: Electron.BrowserWindowConstructorOptions = {
  height: 640,
  width: 1200,
  minWidth: 1200,
  minHeight: 640,
  titleBarStyle: 'hidden',
  // titleBarStyle: 'hiddenInset',
  webPreferences: {
    nodeIntegration: true,
    contextIsolation: false, // read into this!
  },
  backgroundColor: '#0D1117',
  /* enable vibrancy */
  // transparent: true,
  // // vibrancy: 'window',
  // vibrancy: 'sidebar',
  // backgroundColor: '#00000000',
  // visualEffectState: 'followWindow',
}

const createWindow = (): void => {
  // Create the browser window.
  // mainWindow = new BrowserWindow(windowOptions)
  mainWindow = createMnemonicWindow('main', windowOptions)

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  // Open the DevTools.
  if (isDevelopment) {
    mainWindow.webContents.openDevTools()
  }
}

// FIXME: implement double click on titlebar to maximize

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createWindow()

  // create application menu
  const menuTemplate: Electron.MenuItemConstructorOptions[] = []

  if (platform === 'darwin') {
    menuTemplate.push({
      label: app.name,
      submenu: [
        {
          label: `About ${app.name}`,
          click: () => {
            if (!aboutWindow) {
              aboutWindow = createAboutWindow()
              aboutWindow.on('close', () => (aboutWindow = null))
              if (isDevelopment) {
                aboutWindow.webContents.openDevTools()
              }
            }
          },
        },
        // { role: 'about' },
        { type: 'separator' },
        { role: 'services' },
        { type: 'separator' },
        { role: 'hide' },
        { role: 'hideOthers' },
        { role: 'unhide' },
        { type: 'separator' },
        { role: 'quit' },
      ],
    })

    menuTemplate.push({
      role: 'editMenu',
    })
  }

  menuTemplate.push({
    role: 'help',
    submenu: [
      {
        label: 'GitHub Repo',
        click: async () => {
          // eslint-disable-next-line @typescript-eslint/no-var-requires
          const { shell } = require('electron')
          await shell.openExternal('https://github.com/everdrone/typeclient')
        },
      },
    ],
  })

  const menu = Menu.buildFromTemplate(menuTemplate)
  Menu.setApplicationMenu(menu)

  // set CSP
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        // FIXME: this is insecure, see https://www.electronjs.org/docs/latest/tutorial/security#how-4
        'Content-Security-Policy': [
          "default-src * blob: 'unsafe-eval' 'unsafe-inline'; img-src * data: blob: 'unsafe-inline';",
        ],
      },
    })
  })

  /* event handling */
  ipcMain.handle('showMessageBox', (event, options: MessageBoxOptions) => {
    // console.log(event, args)
    dialog.showMessageBox(mainWindow, options).then(response => console.log(response))
  })

  registerDocumentHandlers(mainWindow)
  registerCollectionHandlers(mainWindow)

  /* register events */
  ipcMain.handle('app-close', () => {
    mainWindow.close()
  })

  ipcMain.handle('app-minimize', () => {
    mainWindow.minimize()
  })

  ipcMain.handle('app-maximize', () => {
    if (mainWindow.isMaximized()) {
      mainWindow.unmaximize()
    } else {
      mainWindow.maximize()
    }
  })

  /* send events back to renderer */
  mainWindow.on('maximize', () => mainWindow.webContents.send('window-maximized'))

  mainWindow.on('unmaximize', () => mainWindow.webContents.send('window-unmaximized'))
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
